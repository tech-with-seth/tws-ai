generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    USER
}

model User {
    id         String        @id @default(cuid())
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    account    Account?
    profile    Profile?
    password   Password?
    email      String        @unique
    threads    Thread[]
    assistants Assistant[]
    files      File[]
    role       Role          @default(USER)
    companies  Company[]
    activity   ActivityLog[]
    messages   Message[]
}

model Company {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String   @unique
    description String?
    users       User[]
}

model Password {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    hash      String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String   @unique
}

model Profile {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    avatar    String?
    bio       String?
    firstName String
    lastName  String
    location  String?
    website   String?
}

model Account {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
}

model Assistant {
    id            String   @id @default(cuid())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    oId           String   @unique
    user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    name          String   @unique
    slug          String   @unique
    threads       Thread[]
    vectorStoreId String?
}

model Message {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    oId       String   @unique
    thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
    threadId  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
}

model Thread {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    oId         String    @unique
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    name        String?   @unique
    slug        String?   @unique
    assistant   Assistant @relation(fields: [assistantId], references: [id], onDelete: Cascade)
    assistantId String
    Message     Message[]
}

model File {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    oId       String   @unique
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    name      String   @unique
    slug      String   @unique
}

enum ActionType {
    CREATE_THREAD
    UPDATE_THREAD
    DELETE_THREAD
    UPLOAD_FILE
    DELETE_FILE
    CREATE_ASSISTANT
    UPDATE_ASSISTANT
    DELETE_ASSISTANT
    LOGIN
    LOGOUT
}

model ActivityLog {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    action    ActionType // Enforce enum for consistency
    meta      Json? // Flexible field for additional information
}

model Article {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title     String
    content   String
    sanityId  String   @unique
}
